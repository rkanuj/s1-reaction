/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PostBanUserOrToken401Response,
  PostBanUserOrTokenRequestAdminAuth,
  PostGenerateToken200Response,
  PostGenerateTokenRequest,
  PostVerifyToken200Response,
} from '../models/index';
import {
    PostBanUserOrToken401ResponseFromJSON,
    PostBanUserOrToken401ResponseToJSON,
    PostBanUserOrTokenRequestAdminAuthFromJSON,
    PostBanUserOrTokenRequestAdminAuthToJSON,
    PostGenerateToken200ResponseFromJSON,
    PostGenerateToken200ResponseToJSON,
    PostGenerateTokenRequestFromJSON,
    PostGenerateTokenRequestToJSON,
    PostVerifyToken200ResponseFromJSON,
    PostVerifyToken200ResponseToJSON,
} from '../models/index';

export interface PostGenerateTokenOperationRequest {
    postGenerateTokenRequest?: PostGenerateTokenRequest;
}

export interface PostVerifyTokenRequest {
    postBanUserOrTokenRequestAdminAuth?: PostBanUserOrTokenRequestAdminAuth;
}

/**
 * 
 */
export class TokenApi extends runtime.BaseAPI {

    /**
     * Generate a token for user
     */
    async postGenerateTokenRaw(requestParameters: PostGenerateTokenOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostGenerateToken200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/token/generate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostGenerateTokenRequestToJSON(requestParameters['postGenerateTokenRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostGenerateToken200ResponseFromJSON(jsonValue));
    }

    /**
     * Generate a token for user
     */
    async postGenerateToken(requestParameters: PostGenerateTokenOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostGenerateToken200Response> {
        const response = await this.postGenerateTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Verify a token if it is valid, without checking the ban list
     */
    async postVerifyTokenRaw(requestParameters: PostVerifyTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostVerifyToken200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/token/verify`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostBanUserOrTokenRequestAdminAuthToJSON(requestParameters['postBanUserOrTokenRequestAdminAuth']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostVerifyToken200ResponseFromJSON(jsonValue));
    }

    /**
     * Verify a token if it is valid, without checking the ban list
     */
    async postVerifyToken(requestParameters: PostVerifyTokenRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostVerifyToken200Response> {
        const response = await this.postVerifyTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
