/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PostBanUserOrToken401Response,
  PostQueryPostReacts200Response,
  PostQueryPostReactsRequest,
  PostQueryUserReacts200Response,
  PostQueryUserReactsRequest,
  PostUpdatePostReact200Response,
  PostUpdatePostReactRequest,
} from '../models/index';
import {
    PostBanUserOrToken401ResponseFromJSON,
    PostBanUserOrToken401ResponseToJSON,
    PostQueryPostReacts200ResponseFromJSON,
    PostQueryPostReacts200ResponseToJSON,
    PostQueryPostReactsRequestFromJSON,
    PostQueryPostReactsRequestToJSON,
    PostQueryUserReacts200ResponseFromJSON,
    PostQueryUserReacts200ResponseToJSON,
    PostQueryUserReactsRequestFromJSON,
    PostQueryUserReactsRequestToJSON,
    PostUpdatePostReact200ResponseFromJSON,
    PostUpdatePostReact200ResponseToJSON,
    PostUpdatePostReactRequestFromJSON,
    PostUpdatePostReactRequestToJSON,
} from '../models/index';

export interface PostQueryPostReactsOperationRequest {
    postQueryPostReactsRequest?: PostQueryPostReactsRequest;
}

export interface PostQueryUserReactsOperationRequest {
    postQueryUserReactsRequest?: PostQueryUserReactsRequest;
}

export interface PostUpdatePostReactOperationRequest {
    postUpdatePostReactRequest?: PostUpdatePostReactRequest;
}

/**
 * 
 */
export class ReactApi extends runtime.BaseAPI {

    /**
     * Query reactions for post
     */
    async postQueryPostReactsRaw(requestParameters: PostQueryPostReactsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostQueryPostReacts200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/react/queryPost`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostQueryPostReactsRequestToJSON(requestParameters['postQueryPostReactsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostQueryPostReacts200ResponseFromJSON(jsonValue));
    }

    /**
     * Query reactions for post
     */
    async postQueryPostReacts(requestParameters: PostQueryPostReactsOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostQueryPostReacts200Response> {
        const response = await this.postQueryPostReactsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Query reactions for user
     */
    async postQueryUserReactsRaw(requestParameters: PostQueryUserReactsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostQueryUserReacts200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/react/queryUser`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostQueryUserReactsRequestToJSON(requestParameters['postQueryUserReactsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostQueryUserReacts200ResponseFromJSON(jsonValue));
    }

    /**
     * Query reactions for user
     */
    async postQueryUserReacts(requestParameters: PostQueryUserReactsOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostQueryUserReacts200Response> {
        const response = await this.postQueryUserReactsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update reaction for post
     */
    async postUpdatePostReactRaw(requestParameters: PostUpdatePostReactOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostUpdatePostReact200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/react/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostUpdatePostReactRequestToJSON(requestParameters['postUpdatePostReactRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostUpdatePostReact200ResponseFromJSON(jsonValue));
    }

    /**
     * Update reaction for post
     */
    async postUpdatePostReact(requestParameters: PostUpdatePostReactOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostUpdatePostReact200Response> {
        const response = await this.postUpdatePostReactRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
