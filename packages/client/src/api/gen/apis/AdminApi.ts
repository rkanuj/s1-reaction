/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PostBanUserOrToken200Response,
  PostBanUserOrToken401Response,
  PostBanUserOrTokenRequest,
  PostQueryUIDByToken200Response,
  PostQueryUIDByTokenRequest,
} from '../models/index';
import {
    PostBanUserOrToken200ResponseFromJSON,
    PostBanUserOrToken200ResponseToJSON,
    PostBanUserOrToken401ResponseFromJSON,
    PostBanUserOrToken401ResponseToJSON,
    PostBanUserOrTokenRequestFromJSON,
    PostBanUserOrTokenRequestToJSON,
    PostQueryUIDByToken200ResponseFromJSON,
    PostQueryUIDByToken200ResponseToJSON,
    PostQueryUIDByTokenRequestFromJSON,
    PostQueryUIDByTokenRequestToJSON,
} from '../models/index';

export interface PostBanUserOrTokenOperationRequest {
    postBanUserOrTokenRequest?: PostBanUserOrTokenRequest;
}

export interface PostQueryUIDByTokenOperationRequest {
    postQueryUIDByTokenRequest?: PostQueryUIDByTokenRequest;
}

/**
 * 
 */
export class AdminApi extends runtime.BaseAPI {

    /**
     * Ban a user or token
     */
    async postBanUserOrTokenRaw(requestParameters: PostBanUserOrTokenOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostBanUserOrToken200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/banUserOrToken`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostBanUserOrTokenRequestToJSON(requestParameters['postBanUserOrTokenRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostBanUserOrToken200ResponseFromJSON(jsonValue));
    }

    /**
     * Ban a user or token
     */
    async postBanUserOrToken(requestParameters: PostBanUserOrTokenOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostBanUserOrToken200Response> {
        const response = await this.postBanUserOrTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Query UID by token
     */
    async postQueryUIDByTokenRaw(requestParameters: PostQueryUIDByTokenOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostQueryUIDByToken200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/queryUIDByToken`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostQueryUIDByTokenRequestToJSON(requestParameters['postQueryUIDByTokenRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostQueryUIDByToken200ResponseFromJSON(jsonValue));
    }

    /**
     * Query UID by token
     */
    async postQueryUIDByToken(requestParameters: PostQueryUIDByTokenOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostQueryUIDByToken200Response> {
        const response = await this.postQueryUIDByTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
